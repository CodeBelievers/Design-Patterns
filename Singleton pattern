When we want to create only one instance of a class in a truly object oriented fashion by adhering to the basic principles of object oriented programming, the Singleton patterns are used. The Singleton Pattern comes under that classification of Creational Pattern, which deals with the best ways to create objects. The Singleton Design pattern is used, where only one instance of an object is needed throughout the lifetime of an application. The Singleton class is instantiated at the time of first access and same instance is used thereafter till the application quits.

The Singletons are often used to control access to resources such as database connections or sockets. Suppose we have a license for only one connection for our database. A Singleton connection object makes sure that only one connection can be made at any time.

Singleton pattern offers several advantages over global variables because it does the following:

1) Enforces that only one instance of the class can be instantiated.
2) Allows control over the allocation and destruction of the object.
3) Provides thread-safe access to the object's global state.


#include<iostream>

using namespace std;

class Singleton
{
  private:
    static Singleton *instance;
    Singleton(){};
public:
    static Singleton* getInstance();
    
};

Singleton* Singleton::instance = 0;

Singleton* Singleton::getInstance()
{
    if (!instance)
    {
        instance = new Singleton();
        cout << "First time instance created" << endl;
        return instance;
    }
    else
    {
        cout <<"Object already created" << endl;
        return instance;
    }
}

int main()
{
    
    Singleton *s1 = Singleton::getInstance(); 
    Singleton *s2 = Singleton::getInstance(); 
}

Thread Safe Singleton
The revised version is not thread safe because there could be a race condition during the initialization of the static Singleton, Singleton& Singleton::getInstance(). But we can make the method thread safe by adding a mutex lock:

Singleton& Singleton::getInstance() 
{
    Mutex mutex;
    ScopedLock(&mutex;);  // to unlock mutex on exit
	static Singleton instance;
	return instance;
}
